1. Modify program so that instead of the console.writeline, all the objects must be written in a text file -> 
txt file called as inputted value
  - file content is letter and position as before
  - Look up how to write files in C# for console apps
Done

2. C# password protector app with win installer - encryption / decryption - rijndael algorithm
       - learn basics of encryption
       - learn classes
       - store user passwords encrypted on local
       - could be used on .net for the future through dll
            
3. Remind sensei about interfaces intro.

4. Bonus points:
Targetpractice.cs has a method called TakeDamage
Said methods does multiple things, at the moment contains the logic to decrease health, which is the right thing to do, 
but its also the ONLY thing that this function should do.
The rest of the code, like the thing with 'find canvas', etc, etc - should be moved to a class called NotifyUI , 
which should have methods called like: SendDamageTakenMessage(string message), 
SendRemainingHealthMessage(string message), etc etc,....and then TakeDamage would look only like:

 internal void TakeDamage(int incomingDamage)
{
// ...do stuff to update this.Health....
notificatorUI.SendDamageTakenMessage(calculatedDamgage);

notificatorUI.SendRemainingHealthMessage(this.ToString())
}

... etc etc
internal void TakeDamage(int incomingDamage)
{
// ...do stuff to update this.Health....
this.Health = ...blabla

notificatorUI.SendDamageTakenMessage(calculatedDamgage);
notificatorUI.SendRemainingHealthMessage(this.ToString())
...other notifications sent to UI... etc
}

-----------------------

in NotifyUI, getting an object reference is request for the non static object la FadeTextToZeroAlpha 
si daca fac public static IEnumerator FadeTextToZeroAlpha(float t, TextMeshProUGUI i) eroare se muta la StartCoroutine

5. Also, we need to turn the damage from an integer, into a random value from a - b. 
E.g, the sword doesn't have only 50 damage, but a range between 50-80. How do you make the computer pick a random, etc.

Here we could introduce augment runes which provide a chance of critical strike - double dmg

6. Rename WeaponClass to WeaponRarity - Done

7. Describe what we went over today 3Feb

8. Un fun homework pt interfaces poate fi:
daca tineti minte, in shooting game logic, aia cu augmentele and shit am folosit un truc ca sa putem crea weapons 
de tipuri diferite - am diferentiat weapon dupa un parameter de tip ENUM, 
care dicta ce weapon type este. Asta pt ca lista era de genu List<Weapon> 
(si gen era fix cu aveam azi doar List<Car>, deci accepta uin singur tip de obiect).

Dar ca homewokr puteti elimina necesitatea de a transmite tipu de weapon la constructor call ; sa nu mai fie 
var sword = new Weapon(type.Sword, "sword"), 
...ci sa fie: 
var sword = new Sword();

si lista sa nu contina 
weaponList = new List<Weapon>(), ci sa contina precum azi, o lista de BEHAVIORS, 
deci o lista de interfaces. Astfel incat in lista aia sa pot adauga: 

new Sword()
new Pistol()
new Cannon()
... blablabla
ca la vremea aia nu facusem interfaces, si trebuia cumva sa diferentiem ce tip de arma e. si am zis, ok atunci bagam un enum parameter care face differenta
but its an ugly hack.
